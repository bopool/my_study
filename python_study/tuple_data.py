# tuple(튜플)형
# element 값이 정해지면 값을 수정할 수 없다.
# mutable 변하기 쉬운 / immutable 불변하는 
## mutable 수정 가능한 것 :: list, dict
## imutable 수정 불가능 한 것 :: int, float, str, tuple

# 변수 이름과 변수 값을 따로 관리함 
# 변수에 할당하는 것 : 바인딩 
# mutable 바인딩을 바꿀 수 있다. immutable 못바꾼다. 
# 두 데이터 타입의 특징이 달라서 사용 시 신경써야 함

# 메모리에서 무슨 일이 벌어지는가~
# 메모리 바인딩 파이썬 뮤터블 등등 찾아봐

# 기존 언어는 10이란 데이터 값을 20으로 직접 바꿈 
# 파이썬은 
# 10이 들어있는 것이 아니라 10으로 가는 화살표가 있다. 
# 10으로 가는 화살표를 20으로 가는 화살표로 변경함.
# tuple연산에서도 마찬가지임!! 

# 혹시라도 누가 수정하지 않도록 삭제도 안됨


############################################################

# my_list = [1, 2, 3]
# my_list[0] = 5
# print(my_list)


# # TypeError: 'tuple' object does not support item assignment 
# # 튜플형은 수정 불가능 
# my_tuple = (1, 2, 3)
# my_tuple[0] = 5
# print(my_tuple)

############################################################

# tuple_1 = ("Hello", "world", "python")
# t2 = (1, 2, 3, 4, 5)
# t3 = (1, 2, "Hello")
# t4 = 1, 2, 3 
# t5 = (1, 2, (3, 4, 5))

############################################################

# + * 가 가능함. 새로운 튜플을 만든다고 생각하면 됨 
# t6 = tuble_1 + t2 
# t7 = t3 * 3 

############################################################

# indexing spacing 가능, tuple형태로 뽑힘 
# t3 = (1, 2, "Hello")
# # print(t3[2])
# # print(t3[0:2])
# print(len(t3))


# t5 = (1, 2, (3, 4, 5))
# print(t5[2][1])

# 시퀀스 형태의 데이터 타입 리스트 
# 데이터 값의 순서 위치 바꾸는 것도 값을 수정하는 것이다. 
# 시퀀스 타입의 데이터에서는 순서도 중요한 정보다. 
# 정렬 변경 안됨, 추가 안됨, 뒤집는 것 안됨 
# 중요한 데이터들, 좌표들, 돈, 반드시 참고해야 하는 값들은 tuple로 
# t8 = (5, 3, 1, 4, 2)


############################################################


# 5, 3, 1, 4, 2 순으로 출력된다. 
# t8 = (5, 3, 1, 4, 2)
# for i in t8:
#     print(i)



