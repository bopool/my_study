# 리스트(list) 자료형: 대괄호 안에 element(원소)들을 포함한 자료형 
# 여러개의 값을 변수 1개에 저장 
# 파이썬이 알아서 데이터 크기를 잡아준다. 다른 곳에서는 데이터 크기도 알려줘야 되나 봄
# indexing, slicing 가능하다. 

# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [1, 1, 1, 1, 1, 1, 1]
# ["Hello", "World", "Python"]
# [1, "Hello", 2, "WOW"]
# [1, 2, ["Hello", "World"], 3]
# [] # 비워두고 나중에 채워줄 수 있다. 

# li_1 = [1, 2, 3]
# print(li_1[0])
# print(li_1[1])
# print(li_1[2])
# print(li_1[-1])
# print(li_1[-2])
# print(li_1[-3])
# print(li_1[-4]) # 오류남!!

# print(li_1[0] + li_1[1]) # indexing해온 값을 더할 수 있다. 

# li_2 = [1, 2, 3, [4, 5, 6]]
# print(li_2[3][0]) #3번 index에서 0번 인덱스 데려오는 방법
# print(li_2[2:3])
# print(li_2[1])
# print(li_2[:2])
# print(li_2[3])

# print(li_2[0:1]) # 리스트가 출력됨
# print(li_2[0]) # 정수형 값하나만 출력됨
# 영상의 경우 2차원. 차원이 유지가 된다.
# indexing과 slicing은 다양하게 확장되어 사용된다.  
# 파이썬에서는 리스트가 유일한 시퀀스타입 자료. 기본 사용법을 잘 알아두어야 한다. 

# 대괄호 두개는 2차원. 2차원배열. 
# 인공지능은 차원이 엄청 많다. 배열 반드시 필요함. 대괄호 엄청 많이 씀. index로 불러와야 함. 
# 선 1차원 // 선끼리 묶어 2차원 // 면끼리 묶어 3차원 // 수학의 
# [[1, 2, 3],
# [4, 5, 6],
# [7, 8, 9]]

# li_3 = [1, 2, 3, 4, 5]
# print(li_3[1:3])
# print(li_3[100]) # 안돼!
# print(len(li_3))


# li_3[0] = 10 # 0번째 원소를 10으로 만들고 싶을 때 9 더하는 게 아니라 10으로 재할당해줌!!
# print(li_3) # [10, 2, 3, 4, 5] 출력됨

# append(원소)
## 리스트의 마지막에 원소를 추가해주는 함수
# li_4 = [1, 2, 3]
# li_4.append(4)
# li_4.append("문자")
# li_4.append([리스트])
# print(li_4)


# insert(인덱스, 원소)
## 인덱스 위치에 원소 삽입 
# li = [1, 2, 3]
# li.insert(1, 10) # 1번 index에 10 추가하기!
# print(li)

# remove(값)
## 리스트에서 함수에 입력된 값과 같은 값을 찾아 삭제함 
## 리스트에 없는 값을 삭제하려고 하면 ValueError 남
# li = [1, 2, 3, 2]
# li.remove(2) # 1번 index의 첫번째 2가 지워진다
# print(li)

# pop(인덱스)
## 리스트의 인덱스 위치의 요소를 꺼낸다. 
li = [1, 2, 3, 4]

a = li.pop() # 리스트 안에 있는 값을 없애고 출력한다. 
print(a) # 마지막 값 4 출력

print(li) # [1, 2, 3] 위에서 마지막값 4를 뺐다.  

li.pop(1)
print(li) # [1, 3] 1번 인덱스의 2를 또 뺐다.

b = li.pop(1) #[1, 3]에서 인덱스 1번 값을 빼서 b 변수에 할당하라 
print(li) # [1] 이 남았다. 
print(b) # 3 출력됨. 위에서 뽑은 숫자 3을 변수 b에 넣어서 출력한 값

# # index(값)
# ## 리스트에서 값을 찾아 그 값의 인덱스를 돌려준다(함수에서 가장 중요한 개념인 return). 인덱스 값을 알아내주는 함수 
# li = [1, 2, 3]
# li.index(2)

# # li[2] :: 인덱싱(인덱스로 값에 접근)
# # li.index(값) :: 인덱스 알아내기 

# li = [1, 2, 3]
# idx = li.index(2) # 1
# print(idx) # 인덱스 위치 찾을 때 잘 씀 



# sort()
## 리스트의 요소를 정렬한다. 
# li = [5, 3, 1, 4, 2]
# li.sort() # [1, 2, 3, 4, 5] 오름차순으로 출력됨
# li.sort(reverse = True) # [5, 4, 3, 2, 1] 내림차순으로 출력됨 
# print(li) 

# reverse()
## 리스트의 순서를 뒤집는 함수 
## 규칙대로 정렬하지 않음 거울처럼 그대로 뒤집힘 (중요)
# li = [2, 4, 2, 7, 3, 6]
# li.reverse()
# print(li)


# count(값)
## 리스트 안에서 해당 값이 몇 개 있는지 세는 함수 
# return이 있는 함수. 
# 카운트로 확인하는 방법이 있다. in 연산자를 더 사용하긴 함.  
# li = [1, 2, 4, 2, 2, 3]
# cnt = li.count(2)
# print(cnt) # 3

# 데이터는 원본이 중요하다. 
# 복사해서 사본에서 작업하고 검증한 후 원본에 덮어써야 한다. 


# + 연산자 
## 리스트를 연결한다. 
# li_1 = [1, 2, 3]
# li_2 = [4, 5, 6]
# print(li_1 + li_2) # [1, 2, 3, 4, 5, 6] 출력됨
# li_1.extend(li_2) # [1, 2, 3, 4, 5, 6] 출력됨


# * 연산자 
## 리스트를 반복한다. 
# li = [1, 2, 3]
# print(li * 3) # [1, 2, 3, 1, 2, 3, 1, 2, 3] 출력됨

